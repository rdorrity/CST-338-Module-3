/**
 * Deck class
 * Incorporates Card objects. Interacts with Hand objects through card
 * distribution.
 */
class Deck
{
   // Class variables
   // Maximum number of 52 card decks
   public final int MAX_CARDS = 6 * 52;
   // Static array that holds 52 references to standard Card objects.
   private static Card [] masterPack;
   private Card [] cards;
   private int topCard;
   private int numPacks;

   /**
    * Default constructor for Deck objects.
    */
   public Deck()
   {
      new Deck();
   }

   /**
    * Overloaded constructor for Deck objects. Sets number of packs by
    * default to 1.
    * @param numPacks
    */
   public Deck(int numPacks)
   {
      allocateMasterPack();
      this.numPacks = 1;
      init(numPacks);
      cards = new Card[MAX_CARDS];
      this.topCard = cards.length - 1;
   }

   /**
    * Repopulates Card array with standard Card objects.
    * @param numPacks
    */
   public void init(int numPacks)
   {
      int cardIndex = 0;

      for (int initPacks = 0; initPacks < numPacks; initPacks++)
         for (int mpIndex = 0; mpIndex < 52; mpIndex++)
         {
            cards[cardIndex] = masterPack[mpIndex];
            cardIndex++;
         }
   }

   /**
    * Allocates master pack. Checks if master pack is already initialized. If
    * true, returns without doing anything.
    */
   private static void allocateMasterPack()
   {
      if (masterPack != null)
      {
         // Debug statement
         System.out.println("masterPack already exists.");
         return;
      }
      else
      {
         // Allocate and initialize array of Card objects
         // Variable to track Card object position in masterPack
         masterPack = new Card[52];
         int cardIndex = 0;

         // Initialize arrays of Card suits and values
         char values [] = {'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J',
                 'Q', 'K', 'A'};
         Card.Suit [] suits = {Card.Suit.clubs, Card.Suit.diamonds,
                 Card.Suit.hearts, Card.Suit.spades};

         for (int suitIndex = 0; suitIndex <= suits.length; suitIndex++)

            for (int valueIndex = 0; valueIndex <= values.length; valueIndex++)
            {
               masterPack[cardIndex] = new Card(values[valueIndex],
                       suits[suitIndex]);
               cardIndex++;
            }
      }
   }

   /**
    * Shuffles cards using a random number generator.
    */
   public void shuffle()
   {
      Card temp;

      // Number of swaps done in Card array
      int swaps = 8;

      for (int i = 0; i < swaps; i++)
      {
         // Create two random index values within bounds of array for swapping
         int tempIndex1 = (int)(Math.random() * 52);
         int tempIndex2 = (int)(Math.random() * 52);

         // Set cards at index values
         temp = cards[tempIndex1];
         cards[tempIndex1] = cards[tempIndex2];
         cards[tempIndex2] = temp;

      }
   }

   /**
    * Deals Card object. Returns and removes Card object in top position of the
    * Card array.
    */
   public Card dealCard()
   {
      Card dealtCard = cards[topCard];

      if (topCard >= 0)
      {
         cards[topCard] = null;
         topCard--;
      }

      return dealtCard;
   }

   /**
    * Getter for topCard.
    * @return Value of top Card in deck
    */
   public int getTopCard()
   {
      return topCard;
   }

   /**
    * Getter for individual Card object. Returns a Card with errorFlag = true
    * if int i is invalid.
    * @param i
    * @return Individual invalid Card object
    */
   public Card inspectCard(int i)
   {
      if (i < topCard)
      {
         return cards[i];
      }
      return new Card('E', Card.Suit.diamonds);
   }
}